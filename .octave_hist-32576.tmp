tau_load = time_load(find(omega_load<omegatau_load,1,'last'))-tstart_load 
a = 1/tau_load
A = ((omegass_load-omega0_load)*a)/(Vin_load-V0_load)
% plotting model against experimental data...
s = tf('s');
GH_load1 = A/(s+a); % first order piece of third order system
[ysim_load1,tsim_load1]=step(GH_load1,time_trimmed);
ymodel_load1 = ((Vin_load-V0_load)*ysim_load1)+omega0_load;
figure
hold on;
plot(time_load(startIndex_load:end)-tstart_load,omega_load(startIndex_load:end))
plot(tsim_load1,ymodel_load1)
title('Comparison of Plant Model to Experimental Data for the Mass-Spring System')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
% subtracting first order piece off of third order system...
omega2_load = omega_trimmed - ymodel_load1; % second order piece 
B = 0.117; % this value was determined through iteration
wn = 37.9556;
zeta = 0.057257;
GH_load2 = (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2); % second order piece of third order system
[ysim_load2,tsim_load2]=step(GH_load2,time_trimmed);
ymodel_load2 = ((Vin_load-V0_load)*ysim_load2);
plot(tsim_load2,ymodel_load2)
GH_load = A/(s+a)+ (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2); % entire third order system...
[ysim3,tsim3]=step(GH_load,time_load(startIndex_load:end)-tstart_load); 
ymodel3 = ((Vin_load-V0_load)*ysim3)+omega0_load;
plot(tsim3,ymodel3)
legend('Experimental Data','First Order Piece','Second Order Piece','Third Order Plant Model','location','southeast')
hold off;
_make_figures("/tmp/tmpuhr7upta", "png", "Figure", -1, -1, 0, 0)
# Octave 4.2.2, Thu Oct 15 17:53:54 2020 UTC <herzs@ip-10-1-3-150>
PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
graphics_toolkit
more off; source ~/.octaverc; cd("/home/herzs/Week09_Wednesday");PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
addpath("/usr/local/lib/python3.6/dist-packages/octave_kernel")
graphics_toolkit('gnuplot')
set(0, 'defaultfigurevisible', 'off');
version
%%octave
s = tf('s');
H = 1;
P = 66.64/(s+5.952);
Ksum = 1;
Ki = 13.508;
Kp = 0.360693;
z = 37.5;
C = Ksum*(Kp+Ki/s);
G_closedloop = C*P/(1+C*P*H);
Pclosedloop = (66.64*(s+z))/(s*(s+5.952));
figure()
rlocus(P_cl)
%check eigenvalues
[num,den] = tfdata(G_closedloop,'v');
roots(den);
%magnitude of our step input
r_mag = 25;
%simulate step response 
[y,t] = step(r_mag*G_closedloop);
%calculate our error signal
e = r_mag-y;
%calculate error derivative
[u_i,t] = lsim(Ki/s,e,t);%this simulates the error signal going through the ki/s transfer function.
%calculate control voltage from each piece (proportional, derivative)
u_p = Kp*e;
u_total = Ksum*(u_p+u_i);
%plot our results
figure()
plot(t,y,'k')
xlabel('Time (s)')
ylabel('Angular Speed (rad/s)')
figure()
plot(t,u_p,t,u_i,t,u_total)
legend('proportional','integral','total')
xlabel('Time (s)')
ylabel('Control Signal (V)')
_make_figures("/tmp/tmp6_bdi9im", "png", "Figure", -1, -1, 0, 0)
# Octave 4.2.2, Sun Oct 18 01:21:47 2020 UTC <herzs@ip-10-1-3-152>
PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
graphics_toolkit
more off; source ~/.octaverc; cd("/home/herzs/Exam_1");PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
addpath("/usr/local/lib/python3.6/dist-packages/octave_kernel")
graphics_toolkit('gnuplot')
set(0, 'defaultfigurevisible', 'off');
version
# Octave 4.2.2, Sun Oct 18 12:54:35 2020 UTC <herzs@ip-10-1-3-152>
PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
graphics_toolkit
more off; source ~/.octaverc; cd("/home/herzs/Week09_Wednesday");PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
addpath("/usr/local/lib/python3.6/dist-packages/octave_kernel")
graphics_toolkit('gnuplot')
set(0, 'defaultfigurevisible', 'off');
version
# Octave 4.2.2, Tue Oct 20 12:54:34 2020 UTC <herzs@ip-10-1-3-152>
PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
graphics_toolkit
more off; source ~/.octaverc; cd("/home/herzs/Lab_6");PS1('PEXPECT_PROMPT>'); PS2('PEXPECT_PROMPT_')
addpath("/usr/local/lib/python3.6/dist-packages/octave_kernel")
graphics_toolkit('gnuplot')
set(0, 'defaultfigurevisible', 'off');
version
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1);
omegad_1stOrder = data_1stOrder(:,2);
omega_1stOrder = data_1stOrder(:,3);
PWM_1stOrder = data_1stOrder(:,4);
voltage_1stOrder = data_1stOrder(:,5);
_make_figures("/tmp/tmp6vgi9wg4", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1*1E-6 % time (s)
omegad_1stOrder = data_1stOrder(:,2);
omega_1stOrder = data_1stOrder(:,3);
PWM_1stOrder = data_1stOrder(:,4);
voltage_1stOrder = data_1stOrder(:,5);
_make_figures("/tmp/tmp9wtkrgxu", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6 % time (s)
omegad_1stOrder = data_1stOrder(:,2);
omega_1stOrder = data_1stOrder(:,3);
PWM_1stOrder = data_1stOrder(:,4);
voltage_1stOrder = data_1stOrder(:,5);
_make_figures("/tmp/tmpatdr5q6_", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2);
omega_1stOrder = data_1stOrder(:,3);
PWM_1stOrder = data_1stOrder(:,4);
voltage_1stOrder = data_1stOrder(:,5);
_make_figures("/tmp/tmpsiqt3nlv", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
% first order PI Controller model...
s = tf('s');
GH_load1 = A/(s+a); % first order piece of third order system
[ysim_load1,tsim_load1]=step(GH_load1,time_trimmed);
ymodel_load1 = ((Vin_load-V0_load)*ysim_load1)+omega0_load;
_make_figures("/tmp/tmpyhuxj5rt", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder - tstart_1stOrder;
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
plot(timetrimmed_1stOrder,omega_1stOrder)
plot(t1,ymodel1)
_make_figures("/tmp/tmpe_etzkg0", "png", "Figure", -1, -1, 0, 0)
z1 = 15.9; % zero that causes root locus to pass through target point
K1 = 0.266; % gain pulled from graph
Ksum1 = 1; % assuming Ksum is 1
Kp1 = K1/Ksum1 % proportional gain
Ki1 = Kp1*z1 % integral gain
_make_figures("/tmp/tmprsrlogz3", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder - tstart_1stOrder;
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
plot(timetrimmed_1stOrder,omega_1stOrder)
plot(t1,ymodel1)
_make_figures("/tmp/tmpr_qsvd23", "png", "Figure", -1, -1, 0, 0)
% loading data...
data_load = load('StepResponse_Weighted8.txt');
time_load = data_load(:,1)*10^-6; % time (s)
Vs_load = data_load(:,3); % voltages (V)
V0_load = Vs_load(1); % initial voltage (V)
startIndex_load = find(Vs_load>V0_load,1,'first'); % finding index where votlage step occurs
tstart_load = time_load(startIndex_load); % time where voltage step occurs
Vin_load = Vs_load(startIndex_load); % magnitude of input voltage after step (V)
omega_load = data_load(:,4); % angular speed (rad/s)
omega0_load = mean(omega_load(1:20)) % initial angular speed (rad/s)
omegass_load = mean(omega_load(end-20:end)) % steady state angular speed after voltage step (rad/s)
omega_trimmed = omega_load(startIndex_load:end); % trimmed angular speeds to only include after the voltage step
time_trimmed = time_load(startIndex_load:end)-tstart_load; % trimmed time to only include after the voltage step
% finding time constant (tau)
omegatau_load = (0.632*(omegass_load - omega0_load))+omega0_load; 
tau_load = time_load(find(omega_load<omegatau_load,1,'last'))-tstart_load 
a = 1/tau_load
A = ((omegass_load-omega0_load)*a)/(Vin_load-V0_load)
% plotting model against experimental data...
s = tf('s');
GH_load1 = A/(s+a); % first order piece of third order system
[ysim_load1,tsim_load1]=step(GH_load1,time_trimmed);
ymodel_load1 = ((Vin_load-V0_load)*ysim_load1)+omega0_load;
figure
hold on;
plot(time_load(startIndex_load:end)-tstart_load,omega_load(startIndex_load:end))
plot(tsim_load1,ymodel_load1)
title('Comparison of Plant Model to Experimental Data for the Mass-Spring System')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
% subtracting first order piece off of third order system...
omega2_load = omega_trimmed - ymodel_load1; % second order piece 
B = 0.117; % this value was determined through iteration
wn = 37.9556;
zeta = 0.057257;
GH_load2 = (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2); % second order piece of third order system
[ysim_load2,tsim_load2]=step(GH_load2,time_trimmed);
ymodel_load2 = ((Vin_load-V0_load)*ysim_load2);
plot(tsim_load2,ymodel_load2)
GH_load = A/(s+a)+ (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2); % entire third order system...
[ysim3,tsim3]=step(GH_load,time_load(startIndex_load:end)-tstart_load); 
ymodel3 = ((Vin_load-V0_load)*ysim3)+omega0_load;
plot(tsim3,ymodel3)
legend('Experimental Data','First Order Piece','Second Order Piece','Third Order Plant Model','location','southeast')
hold off;
_make_figures("/tmp/tmp_iekn4ko", "png", "Figure", -1, -1, 0, 0)
A = 66.64;
a = 5.952;
s = tf('s');
GH1 = A/(s+a); % first order piece of third order system
tau = 1/a;
ts = 4*tau; % 2% settling time
tsd1 = 0.5*ts; % desired 2% settling time for first order piece
zetad1 = 0.707; % desired damping ratio for the first order piece
wnd1 = 4/(tsd1*zetad1); % desired natural frequency for the first order piece
sd1_1 = -(zetad1*wnd1) + wnd1*sqrt(1-zetad1^2)*1j
sd2_1 = -(zetad1*wnd1) - wnd1*sqrt(1-zetad1^2)*1j
_make_figures("/tmp/tmpaijdd1cr", "png", "Figure", -1, -1, 0, 0)
z1 = 15.9; % zero that causes root locus to pass through target point
K1 = 0.266; % gain pulled from graph
Ksum1 = 1; % assuming Ksum is 1
Kp1 = K1/Ksum1 % proportional gain
Ki1 = Kp1*z1 % integral gain
_make_figures("/tmp/tmpqo0aneh8", "png", "Figure", -1, -1, 0, 0)
tsd3 = 0.68295; % desired 2% settling time for the third order piece
zetad3 = 0.707; % desired damping ratio for the third order piece
wnd3 = 4/(tsd3*zetad3); % desired natural frequency for the third order piece
sd1_3 = -(zetad3*wnd3) + wnd3*sqrt(1-zetad3^2)*1j
sd2_3 = -(zetad3*wnd3) - wnd3*sqrt(1-zetad3^2)*1j
_make_figures("/tmp/tmp8pj1w2i_", "png", "Figure", -1, -1, 0, 0)
z3 = 11.2; % zero that causes root locus to pass through target point
K3 = 0.0983; % gain pulled from graph
Ksum3 = 1; % assuming Ksum is 1
Kp3 = K3/Ksum3 % proportional gain
Ki3 = Kp3*z3 % integral gain
_make_figures("/tmp/tmpieiir0o1", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder - tstart_1stOrder;
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
plot(timetrimmed_1stOrder,omega_1stOrder)
plot(t1,ymodel1)
_make_figures("/tmp/tmpicteflxp", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder - tstart_1stOrder;
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omega_1stOrder)
plot(t1,ymodel1)
hold off;
_make_figures("/tmp/tmp4iooqbiy", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder(startIndex:end) - tstart_1stOrder;
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omega_1stOrder)
plot(t1,ymodel1)
hold off;
_make_figures("/tmp/tmpn2pwc6sq", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder(startIndex_1stOrder:end) - tstart_1stOrder;
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omega_1stOrder)
plot(t1,ymodel1)
hold off;
_make_figures("/tmp/tmpz0kg1_i9", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder(startIndex_1stOrder:end) - tstart_1stOrder;
omegatrimmed_1stOrder = omega_1stOrder(startIndex_1stOrder:end)
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omega_1stOrder)
plot(t1,ymodel1)
hold off;
_make_figures("/tmp/tmpf1rmlmqb", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder(startIndex_1stOrder:end) - tstart_1stOrder;
omegatrimmed_1stOrder = omega_1stOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omega_1stOrder)
plot(t1,ymodel1)
hold off;
_make_figures("/tmp/tmpd926_wyk", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder(startIndex_1stOrder:end) - tstart_1stOrder;
omegatrimmed_1stOrder = omega_1stOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omegatrimmed_1stOrder)
plot(t1,ymodel1)
hold off;
_make_figures("/tmp/tmp8es5uvb7", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder(startIndex_1stOrder:end) - tstart_1stOrder;
omegatrimmed_1stOrder = omega_1stOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omegatrimmed_1stOrder)
plot(t1,ymodel1)
title('Comparison of First Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmpif6zfemn", "png", "Figure", -1, -1, 0, 0)
% loading data from third order...
data_3rdOrder = load('MassSpringStepResponse_CL3rdOrder.txt');
time_3rdOrder = data_3rdOrder(:,1)*1E-6; % time (s)
omegad_3rdOrder = data_3rdOrder(:,2); % desired speed (rad/s)
omega_3rdOrder = data_3rdOrder(:,3); % actual speed (rad/s)
omega0_3rdOrder = omega_3rdOrder(1); % initial angular speed (rad/s)
omegass_3rdOrder = mean(omega_3rdOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_3rdOrder = data_3rdOrder(:,4); % PWM signal (counts)
voltage_3rdOrder = data_3rdOrder(:,5); % input voltage (V)
omegad0_3rdOrder = omegad_3rdOrder(1); % initial desired speed (rad/s)
startIndex_3rdOrder = find(omegad_3rdOrder>omegad0_3rdOrder,1,'first'); % index where step is applied
omegadss_3rdOrder = omegad_3rdOrder(startIndex_3rdOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_3rdOrder = omegadss_3rdOrder - omegad0_3rdOrder; % step magnitude (rad/s)
tstart_3rdOrder = time_3rdOrder(startIndex_3rdOrder); % time where step is applied (s)
timetrimmed_3rdOrder = time_3rdOrder(startIndex_3rdOrder:end) - tstart_3rdOrder;
omegatrimmed_3rdOrder = omega_3rdOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_3rdOrder = Ksum3*(Kp3+Ki3/s);
Gcl_3rdOrder = C_3rdOrder*GH3/(1+C_3rdOrder*GH3*H);
[y3,t3]=step(Gcl_3rdOrder,timetrimmed_3rdOrder);
ymodel3 = (desiredSpeed_3rdOrder*y3)+omega0_3rdOrder;
figure()
hold on;
plot(timetrimmed_3rdOrder,omegatrimmed_3rdOrder)
plot(t3,ymodel3)
title('Comparison of Third Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmp8p6tpm_z", "png", "Figure", -1, -1, 0, 0)
% loading data from third order...
data_3rdOrder = load('MassSpringStepResponse_CL3rdOrder.txt');
time_3rdOrder = data_3rdOrder(:,1)*1E-6; % time (s)
omegad_3rdOrder = data_3rdOrder(:,2); % desired speed (rad/s)
omega_3rdOrder = data_3rdOrder(:,3); % actual speed (rad/s)
omega0_3rdOrder = omega_3rdOrder(1); % initial angular speed (rad/s)
omegass_3rdOrder = mean(omega_3rdOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_3rdOrder = data_3rdOrder(:,4); % PWM signal (counts)
voltage_3rdOrder = data_3rdOrder(:,5); % input voltage (V)
omegad0_3rdOrder = omegad_3rdOrder(1); % initial desired speed (rad/s)
startIndex_3rdOrder = find(omegad_3rdOrder>omegad0_3rdOrder,1,'first'); % index where step is applied
omegadss_3rdOrder = omegad_3rdOrder(startIndex_3rdOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_3rdOrder = omegadss_3rdOrder - omegad0_3rdOrder; % step magnitude (rad/s)
tstart_3rdOrder = time_3rdOrder(startIndex_3rdOrder); % time where step is applied (s)
timetrimmed_3rdOrder = time_3rdOrder(startIndex_3rdOrder:end) - tstart_3rdOrder;
omegatrimmed_3rdOrder = omega_3rdOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_3rdOrder = Ksum3*(Kp3+Ki3/s);
Gcl_3rdOrder = C_3rdOrder*GH3/(1+C_3rdOrder*GH3*H);
[y3,t3]=step(Gcl_3rdOrder,timetrimmed_3rdOrder);
ymodel3 = (desiredSpeed_3rdOrder*y3)+omega0_3rdOrder;
figure()
hold on;
plot(timetrimmed_3rdOrder,omegatrimmed_3rdOrder)
plot(t3,ymodel3)
title('Comparison of Third Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmp34thpnzj", "png", "Figure", -1, -1, 0, 0)
% loading data from third order...
data_3rdOrder = load('MassSpringStepResponse_CL3rdOrder.txt');
time_3rdOrder = data_3rdOrder(:,1)*1E-6; % time (s)
omegad_3rdOrder = data_3rdOrder(:,2); % desired speed (rad/s)
omega_3rdOrder = data_3rdOrder(:,3); % actual speed (rad/s)
omega0_3rdOrder = omega_3rdOrder(1); % initial angular speed (rad/s)
omegass_3rdOrder = mean(omega_3rdOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_3rdOrder = data_3rdOrder(:,4); % PWM signal (counts)
voltage_3rdOrder = data_3rdOrder(:,5); % input voltage (V)
omegad0_3rdOrder = omegad_3rdOrder(1); % initial desired speed (rad/s)
startIndex_3rdOrder = find(omegad_3rdOrder>omegad0_3rdOrder,1,'first'); % index where step is applied
omegadss_3rdOrder = omegad_3rdOrder(startIndex_3rdOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_3rdOrder = omegadss_3rdOrder - omegad0_3rdOrder; % step magnitude (rad/s)
tstart_3rdOrder = time_3rdOrder(startIndex_3rdOrder); % time where step is applied (s)
timetrimmed_3rdOrder = time_3rdOrder(startIndex_3rdOrder:end) - tstart_3rdOrder;
omegatrimmed_3rdOrder = omega_3rdOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_3rdOrder = Ksum3*(Kp3+Ki3/s);
Gcl_3rdOrder = C_3rdOrder*GH3/(1+C_3rdOrder*GH3*H);
[y3,t3]=step(Gcl_3rdOrder,timetrimmed_3rdOrder);
ymodel3 = (desiredSpeed_3rdOrder*y3)+omega0_3rdOrder;
figure()
hold on;
plot(timetrimmed_3rdOrder,omegatrimmed_3rdOrder)
plot(t3,ymodel3)
title('Comparison of Third Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmpdaksxqgz", "png", "Figure", -1, -1, 0, 0)
% loading data...
data_load = load('StepResponse_Weighted8.txt');
time_load = data_load(:,1)*10^-6; % time (s)
Vs_load = data_load(:,3); % voltages (V)
V0_load = Vs_load(1); % initial voltage (V)
startIndex_load = find(Vs_load>V0_load,1,'first'); % finding index where votlage step occurs
tstart_load = time_load(startIndex_load); % time where voltage step occurs
Vin_load = Vs_load(startIndex_load); % magnitude of input voltage after step (V)
omega_load = data_load(:,4); % angular speed (rad/s)
omega0_load = mean(omega_load(1:20)) % initial angular speed (rad/s)
omegass_load = mean(omega_load(end-20:end)) % steady state angular speed after voltage step (rad/s)
omega_trimmed = omega_load(startIndex_load:end); % trimmed angular speeds to only include after the voltage step
time_trimmed = time_load(startIndex_load:end)-tstart_load; % trimmed time to only include after the voltage step
% finding time constant (tau)
omegatau_load = (0.632*(omegass_load - omega0_load))+omega0_load; 
tau_load = time_load(find(omega_load<omegatau_load,1,'last'))-tstart_load 
a = 1/tau_load
A = ((omegass_load-omega0_load)*a)/(Vin_load-V0_load)
% plotting model against experimental data...
s = tf('s');
GH_load1 = A/(s+a); % first order piece of third order system
[ysim_load1,tsim_load1]=step(GH_load1,time_trimmed);
ymodel_load1 = ((Vin_load-V0_load)*ysim_load1)+omega0_load;
figure
hold on;
plot(time_load(startIndex_load:end)-tstart_load,omega_load(startIndex_load:end))
plot(tsim_load1,ymodel_load1)
title('Comparison of Plant Model to Experimental Data for the Mass-Spring System')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
% subtracting first order piece off of third order system...
omega2_load = omega_trimmed - ymodel_load1; % second order piece 
B = 0.117; % this value was determined through iteration
wn = 37.9556;
zeta = 0.057257;
GH_load2 = (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2); % second order piece of third order system
[ysim_load2,tsim_load2]=step(GH_load2,time_trimmed);
ymodel_load2 = ((Vin_load-V0_load)*ysim_load2);
plot(tsim_load2,ymodel_load2)
GH_load = A/(s+a)+ (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2); % entire third order system...
[ysim3,tsim3]=step(GH_load,time_load(startIndex_load:end)-tstart_load); 
ymodel3 = ((Vin_load-V0_load)*ysim3)+omega0_load;
plot(tsim3,ymodel3)
legend('Experimental Data','First Order Piece','Second Order Piece','Third Order Plant Model','location','southeast')
hold off;
_make_figures("/tmp/tmpl85s03_0", "png", "Figure", -1, -1, 0, 0)
A = 66.64;
a = 5.952;
s = tf('s');
GH1 = A/(s+a); % first order piece of third order system
tau = 1/a;
ts = 4*tau; % 2% settling time
tsd1 = 0.5*ts; % desired 2% settling time for first order piece
zetad1 = 0.707; % desired damping ratio for the first order piece
wnd1 = 4/(tsd1*zetad1); % desired natural frequency for the first order piece
sd1_1 = -(zetad1*wnd1) + wnd1*sqrt(1-zetad1^2)*1j
sd2_1 = -(zetad1*wnd1) - wnd1*sqrt(1-zetad1^2)*1j
_make_figures("/tmp/tmp2ilo_b7e", "png", "Figure", -1, -1, 0, 0)
z1 = 15.9; % zero that causes root locus to pass through target point
K1 = 0.266; % gain pulled from graph
Ksum1 = 1; % assuming Ksum is 1
Kp1 = K1/Ksum1 % proportional gain
Ki1 = Kp1*z1 % integral gain
_make_figures("/tmp/tmp7v4t3dvw", "png", "Figure", -1, -1, 0, 0)
tsd3 = 0.68295; % desired 2% settling time for the third order piece
zetad3 = 0.707; % desired damping ratio for the third order piece
wnd3 = 4/(tsd3*zetad3); % desired natural frequency for the third order piece
sd1_3 = -(zetad3*wnd3) + wnd3*sqrt(1-zetad3^2)*1j
sd2_3 = -(zetad3*wnd3) - wnd3*sqrt(1-zetad3^2)*1j
_make_figures("/tmp/tmpcm1rpxq1", "png", "Figure", -1, -1, 0, 0)
z3 = 11.2; % zero that causes root locus to pass through target point
K3 = 0.0983; % gain pulled from graph
Ksum3 = 1; % assuming Ksum is 1
Kp3 = K3/Ksum3 % proportional gain
Ki3 = Kp3*z3 % integral gain
_make_figures("/tmp/tmpu56chqf2", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder(startIndex_1stOrder:end) - tstart_1stOrder;
omegatrimmed_1stOrder = omega_1stOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omega0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omegatrimmed_1stOrder)
plot(t1,ymodel1)
title('Comparison of First Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmpfje3b0pr", "png", "Figure", -1, -1, 0, 0)
% loading data from third order...
data_3rdOrder = load('MassSpringStepResponse_CL3rdOrder.txt');
time_3rdOrder = data_3rdOrder(:,1)*1E-6; % time (s)
omegad_3rdOrder = data_3rdOrder(:,2); % desired speed (rad/s)
omega_3rdOrder = data_3rdOrder(:,3); % actual speed (rad/s)
omega0_3rdOrder = omega_3rdOrder(1); % initial angular speed (rad/s)
omegass_3rdOrder = mean(omega_3rdOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_3rdOrder = data_3rdOrder(:,4); % PWM signal (counts)
voltage_3rdOrder = data_3rdOrder(:,5); % input voltage (V)
omegad0_3rdOrder = omegad_3rdOrder(1); % initial desired speed (rad/s)
startIndex_3rdOrder = find(omegad_3rdOrder>omegad0_3rdOrder,1,'first'); % index where step is applied
omegadss_3rdOrder = omegad_3rdOrder(startIndex_3rdOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_3rdOrder = omegadss_3rdOrder - omegad0_3rdOrder; % step magnitude (rad/s)
tstart_3rdOrder = time_3rdOrder(startIndex_3rdOrder); % time where step is applied (s)
timetrimmed_3rdOrder = time_3rdOrder(startIndex_3rdOrder:end) - tstart_3rdOrder;
omegatrimmed_3rdOrder = omega_3rdOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_3rdOrder = Ksum3*(Kp3+Ki3/s);
Gcl_3rdOrder = C_3rdOrder*GH3/(1+C_3rdOrder*GH3*H);
[y3,t3]=step(Gcl_3rdOrder,timetrimmed_3rdOrder);
ymodel3 = (desiredSpeed_3rdOrder*y3)+omega0_3rdOrder;
figure()
hold on;
plot(timetrimmed_3rdOrder,omegatrimmed_3rdOrder)
plot(t3,ymodel3)
title('Comparison of Third Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmpi1yuvlz4", "png", "Figure", -1, -1, 0, 0)
% loading data from third order...
data_3rdOrder = load('MassSpringStepResponse_CL3rdOrder.txt');
time_3rdOrder = data_3rdOrder(:,1)*1E-6; % time (s)
omegad_3rdOrder = data_3rdOrder(:,2); % desired speed (rad/s)
omega_3rdOrder = data_3rdOrder(:,3); % actual speed (rad/s)
omega0_3rdOrder = omega_3rdOrder(1); % initial angular speed (rad/s)
omegass_3rdOrder = mean(omega_3rdOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_3rdOrder = data_3rdOrder(:,4); % PWM signal (counts)
voltage_3rdOrder = data_3rdOrder(:,5); % input voltage (V)
omegad0_3rdOrder = omegad_3rdOrder(1); % initial desired speed (rad/s)
startIndex_3rdOrder = find(omegad_3rdOrder>omegad0_3rdOrder,1,'first'); % index where step is applied
omegadss_3rdOrder = omegad_3rdOrder(startIndex_3rdOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_3rdOrder = omegadss_3rdOrder - omegad0_3rdOrder; % step magnitude (rad/s)
tstart_3rdOrder = time_3rdOrder(startIndex_3rdOrder); % time where step is applied (s)
timetrimmed_3rdOrder = time_3rdOrder(startIndex_3rdOrder:end) - tstart_3rdOrder;
omegatrimmed_3rdOrder = omega_3rdOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
GH3 = A/(s+a)+ (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2);
C_3rdOrder = Ksum3*(Kp3+Ki3/s);
Gcl_3rdOrder = C_3rdOrder*GH3/(1+C_3rdOrder*GH3*H);
[y3,t3]=step(Gcl_3rdOrder,timetrimmed_3rdOrder);
ymodel3 = (desiredSpeed_3rdOrder*y3)+omega0_3rdOrder;
figure()
hold on;
plot(timetrimmed_3rdOrder,omegatrimmed_3rdOrder)
plot(t3,ymodel3)
title('Comparison of Third Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmpu6gnvfgb", "png", "Figure", -1, -1, 0, 0)
% loading data from third order...
data_3rdOrder = load('MassSpringStepResponse_CL3rdOrder.txt');
time_3rdOrder = data_3rdOrder(:,1)*1E-6; % time (s)
omegad_3rdOrder = data_3rdOrder(:,2); % desired speed (rad/s)
omega_3rdOrder = data_3rdOrder(:,3); % actual speed (rad/s)
omega0_3rdOrder = omega_3rdOrder(1); % initial angular speed (rad/s)
omegass_3rdOrder = mean(omega_3rdOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_3rdOrder = data_3rdOrder(:,4); % PWM signal (counts)
voltage_3rdOrder = data_3rdOrder(:,5); % input voltage (V)
omegad0_3rdOrder = omegad_3rdOrder(1); % initial desired speed (rad/s)
startIndex_3rdOrder = find(omegad_3rdOrder>omegad0_3rdOrder,1,'first'); % index where step is applied
omegadss_3rdOrder = omegad_3rdOrder(startIndex_3rdOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_3rdOrder = omegadss_3rdOrder - omegad0_3rdOrder; % step magnitude (rad/s)
tstart_3rdOrder = time_3rdOrder(startIndex_3rdOrder); % time where step is applied (s)
timetrimmed_3rdOrder = time_3rdOrder(startIndex_3rdOrder:end) - tstart_3rdOrder;
omegatrimmed_3rdOrder = omega_3rdOrder(startIndex_3rdOrder:end);
% first order PI Controller model...
H = 1;
GH3 = A/(s+a)+ (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2);
C_3rdOrder = Ksum3*(Kp3+Ki3/s);
Gcl_3rdOrder = C_3rdOrder*GH3/(1+C_3rdOrder*GH3*H);
[y3,t3]=step(Gcl_3rdOrder,timetrimmed_3rdOrder);
ymodel3 = (desiredSpeed_3rdOrder*y3)+omega0_3rdOrder;
figure()
hold on;
plot(timetrimmed_3rdOrder,omegatrimmed_3rdOrder)
plot(t3,ymodel3)
title('Comparison of Third Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmpw36qalb0", "png", "Figure", -1, -1, 0, 0)
% loading data from third order...
data_3rdOrder = load('MassSpringStepResponse_CL3rdOrder.txt');
time_3rdOrder = data_3rdOrder(:,1)*1E-6; % time (s)
omegad_3rdOrder = data_3rdOrder(:,2); % desired speed (rad/s)
omega_3rdOrder = data_3rdOrder(:,3); % actual speed (rad/s)
omega0_3rdOrder = omega_3rdOrder(1); % initial angular speed (rad/s)
omegass_3rdOrder = mean(omega_3rdOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_3rdOrder = data_3rdOrder(:,4); % PWM signal (counts)
voltage_3rdOrder = data_3rdOrder(:,5); % input voltage (V)
omegad0_3rdOrder = omegad_3rdOrder(1); % initial desired speed (rad/s)
startIndex_3rdOrder = find(omegad_3rdOrder>omegad0_3rdOrder,1,'first'); % index where step is applied
omegadss_3rdOrder = omegad_3rdOrder(startIndex_3rdOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_3rdOrder = omegadss_3rdOrder - omegad0_3rdOrder; % step magnitude (rad/s)
tstart_3rdOrder = time_3rdOrder(startIndex_3rdOrder); % time where step is applied (s)
timetrimmed_3rdOrder = time_3rdOrder(startIndex_3rdOrder:end) - tstart_3rdOrder;
omegatrimmed_3rdOrder = omega_3rdOrder(startIndex_3rdOrder:end);
% first order PI Controller model...
H = 1;
GH3 = A/(s+a)+ (B*wn^2*s)/(s^2+2*zeta*wn*s+wn^2);
C_3rdOrder = Ksum3*(Kp3+Ki3/s);
Gcl_3rdOrder = C_3rdOrder*GH3/(1+C_3rdOrder*GH3*H);
[y3,t3]=step(Gcl_3rdOrder,timetrimmed_3rdOrder);
ymodel3 = (desiredSpeed_3rdOrder*y3)+omegad0_3rdOrder;
figure()
hold on;
plot(timetrimmed_3rdOrder,omegatrimmed_3rdOrder)
plot(t3,ymodel3)
title('Comparison of Third Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmpt2vnfdow", "png", "Figure", -1, -1, 0, 0)
% loading data from first order...
data_1stOrder = load('MassSpringStepResponse_CL1stOrder.txt');
time_1stOrder = data_1stOrder(:,1)*1E-6; % time (s)
omegad_1stOrder = data_1stOrder(:,2); % desired speed (rad/s)
omega_1stOrder = data_1stOrder(:,3); % actual speed (rad/s)
omega0_1stOrder = omega_1stOrder(1); % initial angular speed (rad/s)
omegass_1stOrder = mean(omega_1stOrder(end-50:end)); % steady state angular speed (rad/s)
PWM_1stOrder = data_1stOrder(:,4); % PWM signal (counts)
voltage_1stOrder = data_1stOrder(:,5); % input voltage (V)
omegad0_1stOrder = omegad_1stOrder(1); % initial desired speed (rad/s)
startIndex_1stOrder = find(omegad_1stOrder>omegad0_1stOrder,1,'first'); % index where step is applied
omegadss_1stOrder = omegad_1stOrder(startIndex_1stOrder); % steady state desired speed magnitude (rad/s)
desiredSpeed_1stOrder = omegadss_1stOrder - omegad0_1stOrder; % step magnitude (rad/s)
tstart_1stOrder = time_1stOrder(startIndex_1stOrder); % time where step is applied (s)
timetrimmed_1stOrder = time_1stOrder(startIndex_1stOrder:end) - tstart_1stOrder;
omegatrimmed_1stOrder = omega_1stOrder(startIndex_1stOrder:end);
% first order PI Controller model...
H = 1;
C_1stOrder = Ksum1*(Kp1+Ki1/s);
Gcl_1stOrder = C_1stOrder*GH1/(1+C_1stOrder*GH1*H);
[y1,t1]=step(Gcl_1stOrder,timetrimmed_1stOrder);
ymodel1 = (desiredSpeed_1stOrder*y1)+omegad0_1stOrder;
figure()
hold on;
plot(timetrimmed_1stOrder,omegatrimmed_1stOrder)
plot(t1,ymodel1)
title('Comparison of First Order PI-Controller to Experimental Data')
xlabel('Time (s)')
ylabel('Angular Velocity (rad/s)')
legend('Experimental Data','Model','location','southeast')
hold off;
_make_figures("/tmp/tmp0evzfvwq", "png", "Figure", -1, -1, 0, 0)
% plotting PWM signal of first and third order 
figure()
hold on;
plot(time_1stOrder-tstart_1stOrder,PWM_1stOrder)
plot(time_3rdOrder-tstart_3rdOrder,PWM_3rdOrder)
title('PWM Signal for First and Third Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
legend('First Order Plant','Third Order Plant','location','southeast')
ylim([0 255])
hold off;
_make_figures("/tmp/tmpto6161r_", "png", "Figure", -1, -1, 0, 0)
% plotting PWM signal of first and third order 
figure()
hold on;
plot(time_1stOrder-tstart_1stOrder,PWM_1stOrder)
plot(time_3rdOrder-tstart_3rdOrder,PWM_3rdOrder)
title('PWM Signal for First and Third Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
legend('First Order Plant','Third Order Plant','location','southeast')
ylim([0 255])
xlim([0 4])
hold off;
_make_figures("/tmp/tmpvsaiukob", "png", "Figure", -1, -1, 0, 0)
% plotting PWM signal of first and third order 
figure()
hold on;
plot(time_1stOrder-tstart_1stOrder,PWM_1stOrder)
plot(time_3rdOrder-tstart_3rdOrder,PWM_3rdOrder)
title('PWM Signal for First and Third Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
legend('First Order Plant','Third Order Plant','location','southeast')
ylim([0 255])
xlim([0 4])
hold off;
maxPWM_1stOrder = max(PWM_1stOrder)
maxPWM_3rdOrder = max(PWM_3rdOrder)
_make_figures("/tmp/tmpn1d4j0al", "png", "Figure", -1, -1, 0, 0)
% plotting PWM signal of first and third order 
figure()
plot(time_1stOrder-tstart_1stOrder,PWM_1stOrder)
title('PWM Signal for First Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 255])
xlim([0 4])
maxPWM_1stOrder = max(PWM_1stOrder)
figure()
plot(time_3rdOrder-tstart_3rdOrder,PWM_3rdOrder)
title('PWM Signal for Third Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 255])
xlim([0 4])
maxPWM_3rdOrder = max(PWM_3rdOrder)
_make_figures("/tmp/tmplrzqhyz_", "png", "Figure", -1, -1, 0, 0)
% plotting PWM signal of first and third order 
figure()
plot(time_1stOrder-tstart_1stOrder,PWM_1stOrder)
title('PWM Signal for First Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 260])
xlim([0 4])
maxPWM_1stOrder = max(PWM_1stOrder)
figure()
plot(time_3rdOrder-tstart_3rdOrder,PWM_3rdOrder)
title('PWM Signal for Third Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 260])
xlim([0 4])
maxPWM_3rdOrder = max(PWM_3rdOrder)
_make_figures("/tmp/tmpzflwt6di", "png", "Figure", -1, -1, 0, 0)
% plotting PWM signal of first and third order 
figure()
plot(time_1stOrder,PWM_1stOrder)
title('PWM Signal for First Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 260])
xlim([0 4])
maxPWM_1stOrder = max(PWM_1stOrder)
figure()
plot(time_3rdOrder,PWM_3rdOrder)
title('PWM Signal for Third Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 260])
xlim([0 4])
maxPWM_3rdOrder = max(PWM_3rdOrder)
_make_figures("/tmp/tmp4f_wuo4v", "png", "Figure", -1, -1, 0, 0)
% plotting PWM signal of first and third order 
figure()
plot(time_1stOrder,PWM_1stOrder)
title('PWM Signal for First Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 260])
maxPWM_1stOrder = max(PWM_1stOrder)
figure()
plot(time_3rdOrder,PWM_3rdOrder)
title('PWM Signal for Third Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 260])
maxPWM_3rdOrder = max(PWM_3rdOrder)
_make_figures("/tmp/tmp2nfnc177", "png", "Figure", -1, -1, 0, 0)
% plotting PWM signal of first and third order 
figure()
plot(time_1stOrder-tstart_1stOrder,PWM_1stOrder)
title('PWM Signal for First Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 260])
maxPWM_1stOrder = max(PWM_1stOrder)
figure()
plot(time_3rdOrder-tstart_3rdOrder,PWM_3rdOrder)
title('PWM Signal for Third Order PI Controller')
xlabel('Time (s)')
ylabel('PWM (counts)')
ylim([0 260])
maxPWM_3rdOrder = max(PWM_3rdOrder)
_make_figures("/tmp/tmpc59uv0z5", "png", "Figure", -1, -1, 0, 0)
# Octave 4.2.2, Wed Oct 21 12:54:34 2020 UTC <herzs@ip-10-1-3-152>
